public abstract class Interactable extends Component
 {
   public abstract void interact();
 }

// ===== MiniGame =====
public class CorrectAnswer extends Interactable
{
  SceneName _transitionToScene;
  public CorrectAnswer(SceneName pTransitionToScene)
  {
    _transitionToScene = pTransitionToScene;
  }
  public void interact()
  {
    //what happens when I choose the correct answer? Do I just go next?
    SceneManager.TransitionToState(_transitionToScene);
  }
}
      // DIARIES === 
public class Diary extends Interactable  
{
  public Diary(String pHalfFullImgName, String pFullBadImgName, String pFullGoodImgName, SceneName pNextScene, int pLevel)
  {
    _halfFull = Images.get(pHalfFullImgName);
    _fullBad = Images.get(pFullBadImgName);
    _fullGood = Images.get(pFullGoodImgName);
    _nextScene = pNextScene;
    _level = pLevel;
  }
  SceneName _nextScene;
  PImage _halfFull;
  PImage _fullGood;
  PImage _fullBad;
  ImageRenderer _renderer;
  boolean _secondPhase;
  int _level;
  boolean waitOneFrame;
  ArrayList<GameObject> _sceneObjects;
  
  @Override
  void onAdd()
  {
    _renderer = GameObject.GetComponent(ImageRenderer.class);
    _renderer.Image = _halfFull;
    _sceneObjects = ((Scene)SceneManager.CurrentState)._objects;
    for(var o : _sceneObjects)
    {
      if(o != GameObject)
        o.Active = false;
    }
  }
  public void interact()//it's reactivated by in teddy/door class
  {
    if(waitOneFrame)
    {
      waitOneFrame = false;
      return;
    }
    
    if(_secondPhase)
    {
      if(SceneManager.CurrentFinishedLvls < _level)
        SceneManager.CurrentFinishedLvls++;

      //reset
      _secondPhase = false;
      waitOneFrame = false;
      _renderer.Image = _halfFull;
      for(var o : _sceneObjects)
      {
        if(o != GameObject)
          o.Active = false;
      }
      SceneManager.TransitionToState(_nextScene);

    }
    else
    {
      //first phase
      for(var o : _sceneObjects)
      {
        if(o != GameObject)
          o.Active = true;
      }
      //soundManager.play(sound);
      Audios.get("pageturn-102978.mp3").play();

      GameObject.Active = false;    
      
    }

  }
  public void InitiateSecondPhase(boolean pIsBadDecision)
  {
    //disabling all objects behing the diary entry
    for(var o : _sceneObjects)
    {
        if(o != GameObject)
          o.Active = false;
    }
    if(pIsBadDecision)
      _renderer.Image = _fullBad;
    else
      _renderer.Image = _fullGood;
     
    //second phase
    Audios.get("pageturn-102978.mp3").play();
     
     _secondPhase = true;
     GameObject.Active = true;
     waitOneFrame = true;
  }
  
}

public class DiaryMenu extends Interactable  
{
  public void interact()
  {
     SceneManager.TransitionToState(SceneName.Menu);
     //start dialogue
  }
}

//Scene 1 ===== CHILDHOOD ROOM =====
public class JumpScareHandler extends Interactable
{
  AnimationController _anim;
  ImageRenderer _animRenderer;
  //boolean choiceMade;
  boolean flag;
  Diary _diary;
  AudioPlay _audio;
  int timer = 10;
  @Override
  void onAdd()
  {
    _anim = SceneManager.GetObjectInScene("Cutscene").GetComponent(AnimationController.class);
    _audio = SceneManager.GetObjectInScene("Audio").GetComponent(AudioPlay.class);
    _diary = SceneManager.GetObjectInScene("diary").GetComponent(Diary.class);
    _animRenderer = _anim.GameObject.GetComponent(ImageRenderer.class);
  }
  @Override
  public void interact()
  {
    _anim.enabled = true;
     _audio.enabled = true;

  }
  @Override
  void onExit()
  {
    _anim.finishedJumpScare = false;

    flag = false;
    _animRenderer.Image = null;
    timer = 10;
  }
  @Override
  public void update()
  {
    if(_anim.finishedJumpScare && timer-- < 0)
    {
      timer = -1;
      /*if(!choiceMade)
      {
        EvilScore++;
        choiceMade = true;    
        
      }*/
      if(!flag)
      {   
        _anim.enabled = false;
        _diary.InitiateSecondPhase(false);
        flag = true;
      }
    }
  }
}
public class Transition extends Interactable
{
  boolean _isBadChoice;
  boolean choiceMade;
  public Transition(boolean pBadChoice)
  {
    _isBadChoice = pBadChoice;
  }
  @Override
  public void interact()
  {   
    if(!choiceMade && _isBadChoice)
    {
      EvilScore++;
      choiceMade = true;    
      println("transiton " + EvilScore);
    }
    
     SceneManager.GetObjectInScene("diary").GetComponent(Diary.class).InitiateSecondPhase(_isBadChoice);
  }
}
public class ImageDisappear extends Component
{
  ImageRenderer _bubble;
  int _sceneStartTime;
  int _timer;
  boolean _alreadyDisabled;
  public ImageDisappear(int pTextTimer)
  {
    _timer = pTextTimer;
  }
  @Override 
  void onAdd()
  {
    _bubble = GameObject.GetComponent(ImageRenderer.class);
    _bubble.enabled = true;
    _sceneStartTime = millis();
  }
  @Override
  public void update()
  {
    if(!_alreadyDisabled && millis() - _sceneStartTime > _timer)
    {
      _bubble.enabled = false;
      _alreadyDisabled = true;
    }
  }
}
public class DrinkBear extends Interactable
{
  ImageRenderer _bgRenderer;
  PImage _hallucinatingImage;
  PImage _origBackground;
  int _timer;
  int _interactionStartTime;
  boolean _alreadyTransitioned;
  boolean _doTransition;
  
  boolean _alreadyChose;
  
  ArrayList<GameObject> _disabledObjects = new ArrayList<GameObject>();
  Diary _diary;
  public DrinkBear(PImage pHallucinatingImage, int pHallucinationTime)
  {
    _hallucinatingImage = pHallucinatingImage;
    _timer = pHallucinationTime;
  }
  
  @Override
  void onAdd()
  {
     _diary = SceneManager.GetObjectInScene("diary").GetComponent(Diary.class);

  }
  
  @Override
  public void interact()
  {
    //disable every object besides player and bg
    Scene scene = (Scene)SceneManager.CurrentState;
    
    for(var c : GameObject._components)
    {
      if(c != this) c.enabled = false;
    }
    
    for(var o : scene._objects)
    {
      if(!o.Active || o == GameObject) continue;
      
      if(o.Name == "diary")
      {
        continue;
      }
      
      if(o.Name == "bg" )
      {
        if(_bgRenderer == null)
          _bgRenderer = o.GetComponent(ImageRenderer.class);
        _origBackground = _bgRenderer.Image;
        _bgRenderer.Image = _hallucinatingImage;
        
        continue;
      }
      if(o.Name != "player")
      {
        o.Active = false;
        _disabledObjects.add(o);
      }
    }
    _interactionStartTime = millis();
    _doTransition = true;
  }
  @Override
  void update()
  {
    //after some time, transition to second phase
    if(_doTransition && !_alreadyTransitioned && millis() - _interactionStartTime > _timer)
    {
      _diary.InitiateSecondPhase(true);//is bad choice
      if(!_alreadyChose)
      {
        EvilScore++;
        _alreadyChose = true;
      }
      _alreadyTransitioned = true;
    }
  }
  @Override
  void onExit()
  {
    if(_origBackground != null)
      _bgRenderer.Image = _origBackground;
    _alreadyTransitioned = false;
    _doTransition = false;

    //revert changes
    for(var o : _disabledObjects)
      o.Active = true;
      
    for(var c : GameObject._components)
      c.enabled = true;
      
    _disabledObjects.clear();
  }
}

public class Teddy extends Transition  
{
  public Teddy(boolean pBadChoice)
  {
    super(pBadChoice);
  }
  public void interact()
  {
    super.interact();
    SceneManager.GrabbedTeddy = true;
  }
}

public class LoreItem extends Interactable
{
  PImage Content;
  int _stayTime;
  int _currStayTime;
  ImageRenderer _playerImg;
  boolean _alreadyDisabled;
  public LoreItem(String pImageName, int pStayTime)
  {
    Content = Images.get(pImageName);
    _stayTime = pStayTime;
  }
  @Override
  public void onAdd()
  {
    _playerImg = SceneManager.GetObjectInScene("playerFollow").GetComponent(ImageRenderer.class);
  }
  @Override
  public void interact()
  {
    _playerImg.Image = Content;
    _playerImg.enabled = true;
    _currStayTime = millis();
    _alreadyDisabled = false;
    //after time, disable text hover
    
  }
  @Override
  public void update()
  {
    if(!_alreadyDisabled && millis() - _currStayTime > _stayTime)
    {
      _playerImg.enabled = false;
      _alreadyDisabled = true;
    }
  }
}
